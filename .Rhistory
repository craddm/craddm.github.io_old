stat_summary(fun.y = mean,geom = "line",size = 1,aes(colour = variable))+
stat_summary(data = levCatDiff,fun.y=mean,geom = "line")+
stat_summary(data = levCatDiff,fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3)+
labs(x = "Time (ms)", y = "Amplitude (muV)",fill = "")+
theme_minimal()
levCat.plot+
stat_summary(fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3,aes(fill = variable))+
stat_summary(fun.y = mean,geom = "line",size = 1,aes(colour = variable))+
guides(fill = "none")+
stat_summary(data = levCatDiff,fun.y=mean,geom = "line")+
stat_summary(data = levCatDiff,fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3)+
labs(x = "Time (ms)", y = "Amplitude (muV)",fill = "")+
theme_minimal()
levCat.plot+
stat_summary(fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3,aes(fill = variable))+
stat_summary(fun.y = mean,geom = "line",size = 1,aes(colour = variable))+
guides(colour = "none")+
stat_summary(data = levCatDiff,fun.y=mean,geom = "line")+
stat_summary(data = levCatDiff,fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3)+
labs(x = "Time (ms)", y = "Amplitude (muV)",fill = "")+
theme_minimal()
levCat.plot+
stat_summary(fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3,aes(fill = variable))+
guides(fill = "none")+
stat_summary(fun.y = mean,geom = "line",size = 1,aes(colour = variable))+
labs(x = "Time (ms)", y = "Amplitude (muV)",fill = "")+
stat_summary(data = levCatDiff,fun.y=mean,geom = "line")+
stat_summary(data = levCatDiff,fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3)+
theme_minimal()
levCat.plot+
stat_summary(fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3,aes(fill = variable))+
guides(fill = "none")+
stat_summary(fun.y = mean,geom = "line",size = 1,aes(colour = variable))+
labs(x = "Time (ms)", y = "Amplitude (muV)",colour = "")+
stat_summary(data = levCatDiff,fun.y=mean,geom = "line")+
stat_summary(data = levCatDiff,fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3)+
theme_minimal()
?guides
levCat.plot+
stat_summary(fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3,aes(fill = variable))+
guides(fill = "none")+
stat_summary(fun.y = mean,geom = "line",size = 1,aes(colour = variable))+
labs(x = "Time (ms)", y = "Amplitude (muV)",colour = "")+
stat_summary(data = levCatDiff,fun.y=mean,geom = "line",aes(colour = variable))+
stat_summary(data = levCatDiff,fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3)+
theme_minimal()
View(levCatDiff)
levCat.plot+
facet_wrap(~variable)+
geom_line(aes(group = Subject),alpha = 0.3)+
theme_minimal()+
labs(x = "Time (ms)",y = expression(paste("Amplitude (",mu,"V)")),colour = "")
levCat.plot+
stat_summary(fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3,aes(fill = variable))+
guides(fill = "none")+
stat_summary(fun.y = mean,geom = "line",size = 1,aes(colour = variable))+
labs(x = "Time (ms)", y = "Amplitude (muV)",colour = "")+
stat_summary(data = levCatDiff,fun.y=mean,geom = "line",aes(colour = variable))+
stat_summary(data = levCatDiff,fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3)+
theme_minimal()
levCatObjNon <- read.csv("C:\\Users\\Matt\\AppData\\Local\\Temp\\Rtmpem3SFN\\data47849fe5a56", header=FALSE)
View(levCatObjNon)
levCatTest <- fread('https://raw.githubusercontent.com/craddm/ExploringERPs/master/levCatObjNon.csv')
levCatTest <- read.csv("https://raw.githubusercontent.com/craddm/ExploringERPs/master/levCatObjNon.csv")
levCatTest <- read.csv("https://raw.githubusercontent.com/craddm/ExploringERPs/master/levCatObjNon.csv",header = FALSE)
levCat.plot+
labs(x = "Time (ms)", y = "Amplitude (muV)",colour = "")+
stat_summary(data = levCatDiff,fun.y=mean,geom = "line",aes(group = Subject))+
stat_summary(data = levCatDiff,fun.y=mean,geom = "line",aes(colour = variable))+
stat_summary(data = levCatDiff,fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3)+
theme_minimal()
levCat.plot+
labs(x = "Time (ms)", y = "Amplitude (muV)",colour = "")+
stat_summary(data = levCatDiff,fun.y=mean,geom = "line",aes(group = Subject),alpha = 0.3)+
stat_summary(data = levCatDiff,fun.y=mean,geom = "line",aes(colour = variable))+
stat_summary(data = levCatDiff,fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3)+
theme_minimal()
levCat.plot+
labs(x = "Time (ms)", y = "Amplitude (muV)",colour = "")+
stat_summary(data = levCatDiff,fun.y=mean,geom = "line",aes(group = Subject),alpha = 0.3)+
stat_summary(data = levCatDiff,fun.y=mean,geom = "line",aes(colour = variable),size = 1)+
stat_summary(data = levCatDiff,fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3)+
theme_minimal()
levCat.plot+
stat_summary(fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3,aes(fill = variable))+
guides(fill = "none")+
stat_summary(fun.y = mean,geom = "line",size = 1,aes(colour = variable))+
labs(x = "Time (ms)", y = "Amplitude (muV)",colour = "")+
stat_summary(data = levCatDiff,fun.y=mean,geom = "line",aes(colour = variable))+
stat_summary(data = levCatDiff,fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3)+
theme_minimal()
levCat.plot+
labs(x = "Time (ms)", y = "Amplitude (muV)",colour = "")+
stat_summary(data = levCatDiff,fun.y=mean,geom = "line",aes(group = Subject,colour = Subject),alpha = 0.3)+
stat_summary(data = levCatDiff,fun.y=mean,geom = "line",aes(colour = variable),size = 1)+
stat_summary(data = levCatDiff,fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3)+
theme_minimal()
levCat.plot+
labs(x = "Time (ms)", y = "Amplitude (muV)",colour = "")+
stat_summary(data = levCatDiff,fun.y=mean,geom = "line",aes(group = Subject),alpha = 0.3)+
stat_summary(data = levCatDiff,fun.y=mean,geom = "line",aes(colour = variable),size = 1)+
stat_summary(data = levCatDiff,fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3)+
theme_minimal()
levCatDiff.plot <- ggplot(levCatDiff,aes(Time,value))+scale_color_brewer(palette = "Set1")+theme_minimal()
levCatDiff.plot+
labs(x = "Time (ms)", y = expression(paste("Amplitude (",mu,"V)")),colour = "")+
stat_summary(fun.y=mean,geom = "line",aes(group = Subject),alpha = 0.3)+
stat_summary(fun.y=mean,geom = "line",aes(colour = variable),size = 1)+
stat_summary(fun.data = mean_cl_boot,geom = "ribbon",alpha = 0.3)+
theme_minimal()
install.packages("RWordPress", repos = "http://www.omegahat.org/R")
?knit2wp
lm.ci <- function(data.frame, conf.level = 0.95, difference = FALSE) {
#loftus-masson within-subject CIs
k = ncol(data.frame)
n <- nrow(data.frame)
df.stack <- stack(data.frame)
require(nlme)
parts <- rep(1:n, k)
root.ms.error <- lme(values ~ 0 + ind, random = ~1 | parts, cbind(parts,
df.stack))[[6]]
detach(package:nlme)
mean.mat <- matrix(, k, 1)
ci.mat <- matrix(, k, 2)
if (difference == TRUE)
diff.factor = 2^0.5/2
else diff.factor = 1
moe <- root.ms.error/n^0.5 * qt(1 - (1 - conf.level)/2, (n - 1) * (k -
1)) * diff.factor
for (i in 1:k) mean.mat[i, ] <- mean(data.frame[i])
for (i in 1:k) {
ci.mat[i, 1] <- mean.mat[i] - moe
ci.mat[i, 2] <- mean.mat[i] + moe
}
dimnames(ci.mat) <- list(names(data.frame), c("lower", "upper"))
ci.mat
}
test.c <- lm.ci(levCatGA)
test.c
library(mnormt)
set.seed(1)
ncm1 <- matrix(c(1,-.9,-.8,-.9,1,.5,-.8,.5, 1), nrow = 3, ncol = 3)
nc.data <- as.data.frame(rmnorm(20, varcov = ncm1))
nc.data
lm.ci(nc.data, difference=TRUE)
library("dplyr", lib.loc="~/R/win-library/3.3")
detach("package:dplyr", unload=TRUE)
lm.ci(nc.data, difference=TRUE)
library("lme4", lib.loc="~/R/win-library/3.3")
detach("package:lme4", unload=TRUE)
library("lmerTest", lib.loc="~/R/win-library/3.3")
detach("package:lmerTest", unload=TRUE)
library("lme4", lib.loc="~/R/win-library/3.3")
detach("package:lme4", unload=TRUE)
lm.ci(nc.data, difference=TRUE)
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
## Norms the data within specified groups in a data frame; it normalizes each
## subject (identified by idvar) so that they have the same mean, within each group
## specified by betweenvars.
##   data: a data frame.
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   na.rm: a boolean that indicates whether to ignore NA's
normDataWithin <- function(data=NULL, idvar, measurevar, betweenvars=NULL,
na.rm=FALSE, .drop=TRUE) {
library(plyr)
# Measure var on left, idvar + between vars on right of formula.
data.subjMean <- ddply(data, c(idvar, betweenvars), .drop=.drop,
.fun = function(xx, col, na.rm) {
c(subjMean = mean(xx[,col], na.rm=na.rm))
},
measurevar,
na.rm
)
# Put the subject means with original data
data <- merge(data, data.subjMean)
# Get the normalized data in a new column
measureNormedVar <- paste(measurevar, "_norm", sep="")
data[,measureNormedVar] <- data[,measurevar] - data[,"subjMean"] +
mean(data[,measurevar], na.rm=na.rm)
# Remove this subject mean column
data$subjMean <- NULL
return(data)
}
## Summarizes data, handling within-subjects variables by removing inter-subject variability.
## It will still work if there are no within-S variables.
## Gives count, un-normed mean, normed mean (with same between-group mean),
##   standard deviation, standard error of the mean, and confidence interval.
## If there are within-subject variables, calculate adjusted values using method from Morey (2008).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   withinvars: a vector containing names of columns that are within-subjects variables
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySEwithin <- function(data=NULL, measurevar, betweenvars=NULL, withinvars=NULL,
idvar=NULL, na.rm=FALSE, conf.interval=.95, .drop=TRUE) {
# Ensure that the betweenvars and withinvars are factors
factorvars <- vapply(data[, c(betweenvars, withinvars), drop=FALSE],
FUN=is.factor, FUN.VALUE=logical(1))
if (!all(factorvars)) {
nonfactorvars <- names(factorvars)[!factorvars]
message("Automatically converting the following non-factors to factors: ",
paste(nonfactorvars, collapse = ", "))
data[nonfactorvars] <- lapply(data[nonfactorvars], factor)
}
# Get the means from the un-normed data
datac <- summarySE(data, measurevar, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Drop all the unused columns (these will be calculated with normed data)
datac$sd <- NULL
datac$se <- NULL
datac$ci <- NULL
# Norm each subject's data
ndata <- normDataWithin(data, idvar, measurevar, betweenvars, na.rm, .drop=.drop)
# This is the name of the new column
measurevar_n <- paste(measurevar, "_norm", sep="")
# Collapse the normed data - now we can treat between and within vars the same
ndatac <- summarySE(ndata, measurevar_n, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Apply correction from Morey (2008) to the standard error and confidence interval
#  Get the product of the number of conditions of within-S variables
nWithinGroups    <- prod(vapply(ndatac[,withinvars, drop=FALSE], FUN=nlevels,
FUN.VALUE=numeric(1)))
correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )
# Apply the correction factor
ndatac$sd <- ndatac$sd * correctionFactor
ndatac$se <- ndatac$se * correctionFactor
ndatac$ci <- ndatac$ci * correctionFactor
# Combine the un-normed means with the normed results
merge(datac, ndatac)
}
summarySEwithin(levCatGA,measurevar = valeu,withinvars = variable,idvar = Subject)
View(levCatGA)
summarySEwithin(levCatGA,measurevar = "value",withinvars = "variable",idvar = "Subject")
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
## Norms the data within specified groups in a data frame; it normalizes each
## subject (identified by idvar) so that they have the same mean, within each group
## specified by betweenvars.
##   data: a data frame.
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   na.rm: a boolean that indicates whether to ignore NA's
normDataWithin <- function(data=NULL, idvar, measurevar, betweenvars=NULL,
na.rm=FALSE, .drop=TRUE) {
library(plyr)
# Measure var on left, idvar + between vars on right of formula.
data.subjMean <- ddply(data, c(idvar, betweenvars), .drop=.drop,
.fun = function(xx, col, na.rm) {
c(subjMean = mean(xx[,col], na.rm=na.rm))
},
measurevar,
na.rm
)
# Put the subject means with original data
data <- merge(data, data.subjMean)
# Get the normalized data in a new column
measureNormedVar <- paste(measurevar, "_norm", sep="")
data[,measureNormedVar] <- data[,measurevar] - data[,"subjMean"] +
mean(data[,measurevar], na.rm=na.rm)
# Remove this subject mean column
data$subjMean <- NULL
return(data)
}
## Summarizes data, handling within-subjects variables by removing inter-subject variability.
## It will still work if there are no within-S variables.
## Gives count, un-normed mean, normed mean (with same between-group mean),
##   standard deviation, standard error of the mean, and confidence interval.
## If there are within-subject variables, calculate adjusted values using method from Morey (2008).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   withinvars: a vector containing names of columns that are within-subjects variables
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySEwithin <- function(data=NULL, measurevar, betweenvars=NULL, withinvars=NULL,
idvar=NULL, na.rm=FALSE, conf.interval=.95, .drop=TRUE) {
# Ensure that the betweenvars and withinvars are factors
factorvars <- vapply(data[, c(betweenvars, withinvars), drop=FALSE],
FUN=is.factor, FUN.VALUE=logical(1))
if (!all(factorvars)) {
nonfactorvars <- names(factorvars)[!factorvars]
message("Automatically converting the following non-factors to factors: ",
paste(nonfactorvars, collapse = ", "))
data[nonfactorvars] <- lapply(data[nonfactorvars], factor)
}
# Get the means from the un-normed data
datac <- summarySE(data, measurevar, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Drop all the unused columns (these will be calculated with normed data)
datac$sd <- NULL
datac$se <- NULL
datac$ci <- NULL
# Norm each subject's data
ndata <- normDataWithin(data, idvar, measurevar, betweenvars, na.rm, .drop=.drop)
# This is the name of the new column
measurevar_n <- paste(measurevar, "_norm", sep="")
# Collapse the normed data - now we can treat between and within vars the same
ndatac <- summarySE(ndata, measurevar_n, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Apply correction from Morey (2008) to the standard error and confidence interval
#  Get the product of the number of conditions of within-S variables
nWithinGroups    <- prod(vapply(ndatac[,withinvars, drop=FALSE], FUN=nlevels,
FUN.VALUE=numeric(1)))
correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )
# Apply the correction factor
ndatac$sd <- ndatac$sd * correctionFactor
ndatac$se <- ndatac$se * correctionFactor
ndatac$ci <- ndatac$ci * correctionFactor
# Combine the un-normed means with the normed results
merge(datac, ndatac)
}
summarySEwithin(levCatGA,measurevar = "value",withinvars = "variable",idvar = "Subject")
summarySEwithin(levCatGA,measurevar = "value",withinvars = "variable",idvar = c("Subject","Time"))
install.packages("servr")
levCatRast.plot <- ggplot(levCatDiff,aes(Time,Subject))+theme_minimal()
levCatRast.plot+
labs(x = "Time (ms)", y = "Subject",colour = "")+
geom_raster(aes(fill = value))
levCatRast.plot <- ggplot(levCatDiff,aes(Time,Subject))+theme_minimal()
levCatRast.plot+
labs(x = "Time (ms)", y = "Subject",colour = "")+
geom_raster(aes(fill = value))
library(ggplot2)
levCatRast.plot <- ggplot(levCatDiff,aes(Time,Subject))+theme_minimal()
levCatRast.plot +
labs(x = "Time (ms)", y = "Subject",colour = "")+
geom_raster(aes(fill = value))
?scale_y_continuous
levCatRast.plot <- ggplot(levCatDiff,aes(Time,Subject))+theme_minimal()
levCatRast.plot +
labs(x = "Time (ms)", y = "Subject",colour = "")+
ylim(1,15)+
geom_raster(aes(fill = value))
levCatRast.plot <- ggplot(levCatDiff,aes(Time,Subject))+theme_minimal()
levCatRast.plot +
labs(x = "Time (ms)", y = "Subject",colour = "")+
scale_y_discrete()+
geom_raster(aes(fill = value))
levCatRast.plot <- ggplot(levCatDiff,aes(Time,Subject))+theme_minimal()
levCatRast.plot +
labs(x = "Time (ms)", y = "Subject",colour = "")+
scale_y_discrete(breaks = 1:15)+
geom_raster(aes(fill = value))
levCatRast.plot <- ggplot(levCatDiff,aes(Time,Subject))+theme_minimal()
levCatRast.plot +
labs(x = "Time (ms)", y = "Subject",colour = "")+
scale_y_continuous(breaks = 1:15)+
geom_raster(aes(fill = value))
levCatRast.plot <- ggplot(levCatDiff,aes(Time,Subject))+theme_minimal()
levCatRast.plot +
scale_y_continuous(breaks = 1:15)+
geom_raster(aes(fill = value))+
labs(x = "Time (ms)", y = "Subject",fill = "Amplitude")
?geom_raster
?scale_fill_continuous
levCatRast.plot <- ggplot(levCatDiff,aes(Time,Subject))+theme_minimal()
levCatRast.plot +
scale_y_continuous(breaks = 1:15)+
geom_raster(aes(fill = value))+
scale_fill_continuous(limites = [-5 5])+
labs(x = "Time (ms)", y = "Subject",fill = "Amplitude")
levCatRast.plot <- ggplot(levCatDiff,aes(Time,Subject))+theme_minimal()
levCatRast.plot +
scale_y_continuous(breaks = 1:15)+
geom_raster(aes(fill = value))+
scale_fill_continuous(limits = [-5 5])+
labs(x = "Time (ms)", y = "Subject",fill = "Amplitude")
levCatRast.plot <- ggplot(levCatDiff,aes(Time,Subject))+theme_minimal()
levCatRast.plot +
scale_y_continuous(breaks = 1:15)+
geom_raster(aes(fill = value))+
scale_fill_continuous(limits = [-5 5]) +
labs(x = "Time (ms)", y = "Subject",fill = "Amplitude")
levCatRast.plot <- ggplot(levCatDiff,aes(Time,Subject))+theme_minimal()
levCatRast.plot +
scale_y_continuous(breaks = 1:15)+
geom_raster(aes(fill = value))+
scale_fill_continuous(limits = [-5,5]) +
labs(x = "Time (ms)", y = "Subject",fill = "Amplitude")
levCatRast.plot <- ggplot(levCatDiff,aes(Time,Subject))+theme_minimal()
levCatRast.plot +
scale_y_continuous(breaks = 1:15)+
geom_raster(aes(fill = value))+
scale_fill_continuous(limits = -5,5) +
labs(x = "Time (ms)", y = "Subject",fill = "Amplitude")
?scale_fill_continuous
levCatRast.plot <- ggplot(levCatDiff,aes(Time,Subject))+theme_minimal()
levCatRast.plot +
scale_y_continuous(breaks = 1:15)+
geom_raster(aes(fill = value))+
scale_fill_continuous(limits = c(-5,5)) +
labs(x = "Time (ms)", y = "Subject",fill = "Amplitude")
levCatRast.plot <- ggplot(levCatDiff,aes(Time,Subject))+theme_minimal()
levCatRast.plot +
scale_y_continuous(breaks = 1:15)+
geom_raster(aes(fill = value))+
scale_fill_continuous(limits = c(-10,10)) +
labs(x = "Time (ms)", y = "Subject",fill = "Amplitude")
levCatRast.plot <- ggplot(levCatDiff,aes(Time,Subject))+theme_minimal()
levCatRast.plot +
scale_y_continuous(breaks = 1:15)+
geom_raster(aes(fill = value))+
scale_fill_continuous(limits = c(-5,5)) +
labs(x = "Time (ms)", y = "Subject",fill = "Amplitude")
levCatRast.plot <- ggplot(levCatDiff,aes(Time,Subject))+theme_minimal()
levCatRast.plot +
scale_y_continuous(breaks = 1:15)+
geom_raster(aes(fill = value))+
scale_fill_continuous(limits = c(-2,2)) +
labs(x = "Time (ms)", y = "Subject",fill = "Amplitude")
knit_with_parameters('C:/Users/Matt/Dropbox/BlogStuff/RMarkdown/FirstP.Rmd')
servr::jekyll()
servr::jekyll()
library(servr)
servr::jekyll()
PATH
Sys.getenv('PATH')
Sys.which('jekyll')
Sys.getenv('PATH')
Sys.which('jekyll')
servr::jekyll()
install.packages(c("curl", "gamm4"))
servr::jekyll()
setwd("C:/Users/Matt/Dropbox/BlogStuff/craddm.github.io")
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
